import React, { useEffect, useState, useCallback } from 'react';
import { getIntakeFormLogsWithFilters } from '../api';
import ProtectedRoute from '../components/ProtectedRoute';
import AnimatedPage from '../components/AnimatedPage';

const AdminIntakeLogsPage = () => {
  const [logs, setLogs] = useState([]);
  const [page, setPage] = useState(1);
  // const [total, setTotal] = useState(0); // Commented out as not currently used
  const [loading, setLoading] = useState(false);
  const [q, setQ] = useState('');
  const [generatedBy, setGeneratedBy] = useState('');
  const [appointmentId, setAppointmentId] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');

  const fetchLogs = useCallback(async (p = 1) => {
    if (startDate && endDate && startDate > endDate) {
      alert('End date must be on/after start date');
      return;
    }
    setLoading(true);
    try {
      const params = { page: p, limit: 20 };
      if (q) params.q = q;
      if (generatedBy) params.generatedBy = generatedBy;
      if (appointmentId) params.appointmentId = appointmentId;
      if (startDate) params.startDate = startDate;
      if (endDate) params.endDate = endDate;
      const { data } = await getIntakeFormLogsWithFilters(params);
      setLogs(data.data || []);
      setPage(p);
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  }, [q, generatedBy, appointmentId, startDate, endDate]);

  useEffect(() => { fetchLogs(1); }, [fetchLogs]);

  return (
    <AnimatedPage>
      <ProtectedRoute adminOnly={true}>
        <div className="container mx-auto p-6">
          <h1 className="text-2xl font-bold mb-4">Intake Form Logs</h1>
          <div className="flex gap-2 mb-4">
            <input placeholder="Search (name / email / appt id)" value={q} onChange={(e)=>setQ(e.target.value)} className="p-2 border rounded" />
            <input placeholder="Generated By (user id)" value={generatedBy} onChange={(e)=>setGeneratedBy(e.target.value)} className="p-2 border rounded" />
            <input placeholder="Appointment ID" value={appointmentId} onChange={(e)=>setAppointmentId(e.target.value)} className="p-2 border rounded" />
            <input type="date" value={startDate} onChange={(e)=>setStartDate(e.target.value)} className="p-2 border rounded" />
            <input type="date" value={endDate} onChange={(e)=>setEndDate(e.target.value)} className="p-2 border rounded" />
            <button onClick={()=>fetchLogs(1)} className="px-3 py-2 bg-blue-600 text-white rounded">Filter</button>
            <button onClick={()=>{ setQ(''); setGeneratedBy(''); setAppointmentId(''); setStartDate(''); setEndDate(''); fetchLogs(1); }} className="px-3 py-2 bg-gray-200 rounded">Clear</button>
            <button onClick={async ()=>{
              const params = new URLSearchParams({ page: page, limit: 1000 });
              if (q) params.set('q', q);
              if (generatedBy) params.set('generatedBy', generatedBy);
              if (appointmentId) params.set('appointmentId', appointmentId);
              if (startDate) params.set('startDate', startDate);
              if (endDate) params.set('endDate', endDate);
              const token = localStorage.getItem('token');
              const resp = await fetch(`/api/admin/intake-form-logs/export?${params.toString()}`, { headers: token?{ Authorization: `Bearer ${token}` }:{}});
              if (!resp.ok) { alert('Failed to export'); return; }
              const blob = await resp.blob();
              const url = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = 'intake-form-logs.csv';
              document.body.appendChild(a);
              a.click();
              a.remove();
              setTimeout(()=>window.URL.revokeObjectURL(url), 60000);
            }} className="px-3 py-2 bg-green-600 text-white rounded">Export CSV</button>
          </div>
          {loading ? (
            <div>Loading...</div>
          ) : (
            <div>
              <table className="min-w-full bg-white">
                <thead>
                  <tr>
                    <th className="py-2">When</th>
                    <th className="py-2">By</th>
                    <th className="py-2">Appointment</th>
                    <th className="py-2">File</th>
                  </tr>
                </thead>
                <tbody>
                  {logs.map((log) => (
                    <tr key={log._id} className="border-t">
                      <td className="py-2">{new Date(log.createdAt).toLocaleString()}</td>
                      <td className="py-2">{log.generatedBy?.name || log.generatedBy?.email || 'Unknown'}</td>
                      <td className="py-2">{log.appointment?.appointmentDate || log.appointment?._id}</td>
                      <td className="py-2">
                        {log.fileUrl ? (
                          <a href={log.fileUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600">Download</a>
                        ) : (
                          'â€”'
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              <div className="mt-4 flex gap-2">
                <button disabled={page<=1} onClick={() => fetchLogs(page-1)} className="px-3 py-1 bg-gray-200 rounded">Prev</button>
                <button disabled={logs.length===0} onClick={() => fetchLogs(page+1)} className="px-3 py-1 bg-gray-200 rounded">Next</button>
              </div>
            </div>
          )}
        </div>
      </ProtectedRoute>
    </AnimatedPage>
  );
};

export default AdminIntakeLogsPage;
